<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.nanwe.menu.service.impl.MenuMapper">
	
	<select id="selectMenuList" parameterType="map" resultType="menuVO">
		WITH RECURSIVE MENU AS 
		(
			SELECT
					A.*
					, CONCAT(CAST((LPAD(IFNULL(A.SORT_ORD, 0), 6, '0')) AS CHAR(500)), A.MENU_ID) SORT
			FROM 	COM_MENU A			
			WHERE	1=1
			<choose>
				<when test="hiMenuId !=null and !hiMenuId.equals('')">
					AND A.HI_MENU_ID = #{hiMenuId}
				</when>
				<otherwise>
					AND (A.HI_MENU_ID IS NULL OR A.HI_MENU_ID = '')
				</otherwise>
			</choose>
			<if test="menuCd !=null and !menuCd.equals('')">
				AND A.MENU_CD = #{menuCd}
			</if>
			<if test="useYn !=null and !useYn.equals('')">
				<choose>
					<when test='useYn.equals("Y")'>
						AND IFNULL(A.USE_YN, 'N') = 'Y'
					</when>
					<when test='useYn.equals("N")'>
						AND IFNULL(A.USE_YN, 'N') = 'N'
					</when>
				</choose>
			</if>
			
			UNION ALL
			
			SELECT	B.*
		            , CONCAT(REC.SORT, '-', CONCAT(CAST((LPAD(IFNULL(B.SORT_ORD, 0), 6, '0')) AS CHAR(500)), B.MENU_ID)) SORT
			FROM	COM_MENU B
			INNER JOIN MENU REC 
			ON 		B.HI_MENU_ID = REC.MENU_ID		
			WHERE	1=1
			<if test="menuCd !=null and !menuCd.equals('')">
				AND B.MENU_CD = #{menuCd}
			</if>
			<if test="useYn !=null and !useYn.equals('')">
				<choose>
					<when test='useYn.equals("Y")'>
						AND IFNULL(B.USE_YN, 'N') = 'Y'
					</when>
					<when test='useYn.equals("N")'>
						AND IFNULL(B.USE_YN, 'N') = 'N'
					</when>
				</choose>
			</if>
		)	
		SELECT
				  A.MENU_CD
				, A.MENU_ID
				, A.HI_MENU_ID
				, A.MENU_NM
				, A.MENU_ABBR_NM
				, A.MENU_ENG_NM
				, A.MENU_ENG_ABBR_NM
				, A.MENU_DESC
				, A.MENU_LVL
				, A.MENU_LINK
				, A.PROG_YN
				, A.PROG_CD
				, A.PROG_PATH
				, A.PROG_PARAM
				, A.SORT_ORD
				, A.USE_YN
				, A.VIEW_YN
				, A.NOTE
				, A.INPT_ID
				, A.INPT_IP
				, A.INPT_DTTM
				, A.MODI_ID
				, A.MODI_IP
				, A.MODI_DTTM
				, (SELECT COUNT(S.MENU_ID) FROM COM_MENU S WHERE S.HI_MENU_ID = A.MENU_ID) AS CHILD_CNT
				, A.FILE_NO
				, A.USE_SSO
		FROM 	MENU A
		ORDER BY A.SORT
	</select>
	
	<select id="selectMenuListByHiMenuId" parameterType="string" resultType="menuVO">
		SELECT
							  MENU_CD
							, MENU_ID
							, HI_MENU_ID
							, MENU_NM
							, MENU_ABBR_NM
							, MENU_ENG_NM
							, MENU_ENG_ABBR_NM
							, MENU_DESC
							, MENU_LVL
							, MENU_LINK
							, PROG_YN
							, PROG_CD
							, PROG_PATH
							, PROG_PARAM
							, SORT_ORD
							, USE_YN
							, VIEW_YN
							, NOTE
							, INPT_ID
							, INPT_IP
							, INPT_DTTM
							, MODI_ID
							, MODI_IP
							, MODI_DTTM
							, FILE_NO
							, USE_SSO
		FROM 				COM_MENU
		WHERE				1=1
		AND					(USE_YN IS NULL OR USE_YN = 'Y')
		AND					HI_MENU_ID = #{hiMenuId}
		ORDER BY 			SORT_ORD ASC
	</select>
	
	<select id="selectMenu" parameterType="string" resultType="menuVO">
		SELECT 
				*
		FROM 	COM_MENU
		WHERE	MENU_ID = #{menuId}
	</select>
	
	<insert id="insertMenu" parameterType="menuVO">
		INSERT
		INTO 	COM_MENU
		(
				  MENU_CD
				, MENU_ID
				, HI_MENU_ID
				, MENU_NM
				, MENU_ABBR_NM
				, MENU_ENG_NM
				, MENU_ENG_ABBR_NM
				, MENU_DESC
				, MENU_LVL
				, MENU_LINK
				, PROG_YN
				, PROG_CD
				, PROG_PATH
				, PROG_PARAM
				, SORT_ORD
				, USE_YN
				, VIEW_YN
				, NOTE
				, INPT_ID
				, INPT_IP
				, INPT_DTTM
				, FILE_NO
				, USE_SSO
		) VALUES (
				  #{menuCd}
				, #{menuId}
				, #{hiMenuId}
				, #{menuNm}
				, #{menuAbbrNm}
				, #{menuEngNm}
				, #{menuEngAbbrNm}
				, #{menuDesc}
				, (SELECT IFNULL(MAX(S.MENU_LVL), 0)+1 FROM COM_MENU S WHERE S.MENU_ID = #{hiMenuId})
				, #{menuLink}
				, #{progYn}
				, #{progCd}
				, #{progPath}
				, #{progParam}
				, #{sortOrd}
				, #{useYn}
				, #{viewYn}
				, #{note}
				, #{inptId}
				, #{inptIp}
				, NOW()
				, 0
				, #{useSso}
		)
	</insert>
	
	<update id="updateMenu" parameterType="menuVO">
		UPDATE
					COM_MENU
		SET
					  MENU_CD 			= #{menuCd}
					, MENU_NM 			= #{menuNm}
					, MENU_ABBR_NM 		= #{menuAbbrNm}
					, MENU_ENG_NM 		= #{menuEngNm}
					, MENU_ENG_ABBR_NM	= #{menuEngAbbrNm}
					, MENU_DESC 		= #{menuDesc}
					, MENU_LINK 		= #{menuLink}
					, PROG_YN 			= #{progYn}
					, PROG_CD 			= #{progCd}
					, PROG_PATH 		= #{progPath}
					, PROG_PARAM 		= #{progParam}
					, SORT_ORD 			= #{sortOrd}
					, USE_YN 			= #{useYn}
					, VIEW_YN 			= #{viewYn}
					, USE_SSO			= #{useSso}
					, NOTE 				= #{note}
					, MODI_ID 			= #{modiId}
					, MODI_IP			= #{modiIp}
					, MODI_DTTM 		= NOW()
		WHERE 		MENU_ID	= #{menuId}
	</update>
	
	<delete id="deleteMenu" parameterType="string">
		DELETE 
		FROM	COM_MENU
		WHERE 	MENU_ID = #{menuId}
	</delete>
	
	<delete id="deleteMenuByMenuCd" parameterType="string">
		DELETE 
		FROM	COM_MENU
		WHERE 	MENU_CD = #{menuCd}
	</delete>
	
	<select id="selectMenuIdExist" parameterType="string" resultType="int">
		SELECT 
				COUNT(MENU_ID)
		FROM 	COM_MENU
		WHERE	MENU_ID = #{menuId}
	</select>
	
	<select id="selectMenuListByMenuCd" parameterType="map" resultType="menuVO">
		WITH RECURSIVE MENU AS 
		(
			SELECT
					A.*
					, (SELECT COUNT(S.MENU_ID) FROM COM_MENU S WHERE S.HI_MENU_ID = A.MENU_ID AND S.USE_YN = 'Y' AND S.VIEW_YN = 'Y') AS CHILD_CNT
					, CONCAT(CAST((LPAD(IFNULL(A.SORT_ORD, 0), 6, '0')) AS CHAR(500)), A.MENU_ID) SORT
			FROM 	COM_MENU A
			WHERE	A.MENU_CD = #{menuCd}
			<choose>
				<when test="hiMenuId !=null and !hiMenuId.equals('')">
					AND A.MENU_ID = #{hiMenuId}
				</when>
				<otherwise>
					AND (A.HI_MENU_ID IS NULL OR A.HI_MENU_ID = '')
				</otherwise>
			</choose>
			AND 	IFNULL(A.USE_YN, 'N') = 'Y'
			<!-- AND 	IFNULL(A.VIEW_YN, 'N') = 'Y' -->
			<if test="authDvcd != null and userDvcd != null and workDvcd != null and statDvcd != null">
			AND		(
						SELECT 	COUNT(MA.AUTH_CD) 
						FROM 	COM_MENU_AUTH MA 
						WHERE 	MA.MENU_CD = #{menuCd}
						AND 	MA.MENU_ID = A.MENU_ID
 						<!--AND		SFN_IS_AUTH_MAP(MA.AUTH_CD, #{authDvcd}, #{userDvcd}, #{workDvcd}, #{statDvcd}, #{deptCd}) = 'Y'-->
					) > 0
			</if>
			
			UNION ALL
			
			SELECT	B.*
					, (SELECT COUNT(S.MENU_ID) FROM COM_MENU S WHERE S.HI_MENU_ID = B.MENU_ID AND S.USE_YN = 'Y' AND S.VIEW_YN = 'Y') AS CHILD_CNT
		            , CONCAT(REC.SORT, '-', CONCAT(CAST((LPAD(IFNULL(B.SORT_ORD, 0), 6, '0')) AS CHAR(500)), B.MENU_ID)) SORT
			FROM	COM_MENU B
			INNER JOIN MENU REC 
			ON 		B.HI_MENU_ID = REC.MENU_ID		
			WHERE	1=1
			AND 	B.MENU_CD = #{menuCd}
			AND 	IFNULL(B.USE_YN, 'N') = 'Y'
			<!-- AND 	IFNULL(B.VIEW_YN, 'N') = 'Y' -->
			<if test="authDvcd != null and userDvcd != null and workDvcd != null and statDvcd != null">
			AND		(
						SELECT 	COUNT(MA.AUTH_CD) 
						FROM 	COM_MENU_AUTH MA 
						WHERE 	MA.MENU_CD = #{menuCd}
						AND 	MA.MENU_ID = B.MENU_ID
						<!--AND		SFN_IS_AUTH_MAP(MA.AUTH_CD, #{authDvcd}, #{userDvcd}, #{workDvcd}, #{statDvcd}, #{deptCd}) = 'Y'-->
					) > 0
			</if>
		)	
		SELECT	
						  A.MENU_CD
						, A.MENU_ID
						, A.HI_MENU_ID
						, A.MENU_NM
						, A.MENU_ABBR_NM
						, A.MENU_ENG_NM
						, A.MENU_ENG_ABBR_NM
						, A.MENU_LVL
						, A.MENU_LINK
						, A.PROG_YN
						, A.PROG_CD
						, A.PROG_PATH
						, A.PROG_PARAM
						, A.SORT_ORD
						, A.VIEW_YN
						, A.USE_SSO
						, A.CHILD_CNT
						, IFNULL(A.FILE_NO, 0 ) FILE_NO
						, B.FILE_NAME IMG_NAME
						, B.FILE_PATH IMG_PATH
						, B.FILE_MIME IMG_MIME
					<choose>
						<when test='progCd != null and !"".equals(progCd)'>
						, CASE
		                      WHEN A.PROG_CD = #{progCd} THEN 'Y'
		                      ELSE 'N'
		                  END 
						</when>
						<otherwise>
						 , 'N'
						</otherwise>
					</choose> AS ACTIVE_YN
		FROM		MENU A
		LEFT JOIN	COM_FILES B
		ON			A.FILE_NO = B.FILE_NO
		ORDER BY 	A.SORT
	</select>
	
	<select id="selectContentList" resultType="hashMap">
		SELECT
					  CONCAT(LOWER(SUBSTR(CONT_ID,1,1)) , SUBSTR(REPLACE(SFN_GET_INITCAP(CONT_ID), '_', ''),2)) AS ID
					, CONT_NM AS NAME
		FROM 		COM_CONTENT
		ORDER BY	INPT_DTTM DESC, CONT_ID DESC
	</select>
	
	<select id="selectBbsMgtList" resultType="hashMap">
		SELECT 
					  CONCAT(LOWER(SUBSTR(CODE,1,1)) , SUBSTR(REPLACE(SFN_GET_INITCAP(CODE), '_', ''),2)) AS ID
					, TITLE AS NAME
		FROM 		COM_BBS_MGT
		ORDER BY	INPT_DTTM DESC, CODE ASC
	</select>
	
	<select id="selectSchMgtList" resultType="hashMap">
		SELECT 
					  CONCAT(LOWER(SUBSTR(CODE,1,1)) , SUBSTR(REPLACE(SFN_GET_INITCAP(CODE), '_', ''),2)) AS ID
					, TITLE AS NAME
		FROM 		COM_SCH_MGT
		ORDER BY	INPT_DTTM DESC, CODE ASC
	</select>
	
	
	<update id="updateMenuFile" parameterType="menuVO">
		UPDATE
				COM_MENU
		SET
				FILE_NO = #{fileNo}
		WHERE	MENU_ID = #{menuId}
	</update>
	
	<select id="selectSysMenuList" parameterType="map" resultType="menuVO">
		WITH RECURSIVE SYS_MENU AS 
		(
			SELECT
					A.*
					, CONCAT(CAST((LPAD(IFNULL(A.SORT_ORD, 0), 6, '0')) AS CHAR(500)), A.MENU_ID) SORT
			FROM 	COM_SYS_MENU A
			WHERE	(A.HI_MENU_ID IS NULL OR A.HI_MENU_ID = '')
			AND		A.USE_YN = 'Y'
			AND		A.VIEW_YN = 'Y'
			
			UNION ALL
			
			SELECT	B.*
		            , CONCAT(REC.SORT, '-', CONCAT(CAST((LPAD(IFNULL(B.SORT_ORD, 0), 6, '0')) AS CHAR(500)), B.MENU_ID)) SORT
			FROM	COM_SYS_MENU B
			INNER JOIN SYS_MENU REC 
			ON 		B.HI_MENU_ID = REC.MENU_ID 
			WHERE	B.USE_YN = 'Y'
			AND		B.VIEW_YN = 'Y'
		)
		SELECT
							  A.MENU_ID
							, A.HI_MENU_ID
							, CASE
								  WHEN (IFNULL(A.MENU_ENG_NM, 'NULL') != 'NULL' AND 'ko' != '${language}') THEN A.MENU_ENG_NM
						          ELSE A.MENU_NM
					          END AS MENU_NM
							, A.MENU_ABBR_NM
							, A.MENU_ENG_NM
							, A.MENU_ENG_ABBR_NM
							, A.MENU_LVL
							, A.MENU_LINK
							, A.PROG_YN
							, A.PROG_CD
							, A.PROG_PATH
							, A.PROG_PARAM
							, A.SORT_ORD
							, A.VIEW_YN
							, A.USE_SSO
							, (SELECT COUNT(S.MENU_ID) FROM COM_SYS_MENU S WHERE S.HI_MENU_ID = A.MENU_ID AND S.USE_YN = 'Y' AND S.VIEW_YN = 'Y') AS CHILD_CNT
							, 'N' AS ACTIVE_YN
		FROM				SYS_MENU A
		ORDER BY 			A.SORT
	</select>
	
	<select id="selectPresentMenuInfo" parameterType="map" resultType="menuVO">
		SELECT
					  MENU_CD
					, MENU_ID
					, HI_MENU_ID
					, MENU_NM
					, MENU_ABBR_NM
					, MENU_ENG_NM
					, MENU_ENG_ABBR_NM
					, MENU_DESC
					, MENU_LVL
					, MENU_LINK
					, PROG_YN
					, PROG_CD
					, PROG_PATH
					, PROG_PARAM
					, SORT_ORD
					, USE_YN
					, VIEW_YN
					, NOTE
					, INPT_ID
					, INPT_IP
					, INPT_DTTM
					, MODI_ID
					, MODI_IP
					, MODI_DTTM
					, FILE_NO
					, USE_SSO
		FROM 		COM_MENU
		WHERE		MENU_CD = #{menuCd}
		AND			USE_YN = 'Y'
		AND			PROG_CD = #{progCd}
		<if test='progParam != null and !"".equals(progParam)'>
		AND			PROG_PARAM = #{progParam}
		</if>
		ORDER BY 	MENU_LVL DESC, SORT_ORD ASC, MENU_ID ASC
		LIMIT		0, 1
	</select>
	
	
	
	<select id="selectMenuPathList" parameterType="map" resultType="menuVO">
		WITH RECURSIVE MENU AS 
		(
			SELECT
					A.*
					, CONCAT(CAST((LPAD(IFNULL(A.SORT_ORD, 0), 6, '0')) AS CHAR(500)), A.MENU_ID) SORT
			FROM 	COM_MENU A			
			WHERE	1=1
			AND 	A.MENU_CD = #{menuCd}
			AND 	A.MENU_ID = #{menuId}
			AND 	IFNULL(A.USE_YN, 'N') = 'Y'
			
			UNION ALL
			
			SELECT	B.*
		            , CONCAT(REC.SORT, '-', CONCAT(CAST((LPAD(IFNULL(B.SORT_ORD, 0), 6, '0')) AS CHAR(500)), B.MENU_ID)) SORT
			FROM	COM_MENU B
			INNER JOIN MENU REC 
			ON 		B.MENU_ID = REC.HI_MENU_ID		
			AND 	B.MENU_CD = #{menuCd}
			AND 	IFNULL(B.USE_YN, 'N') = 'Y'
		)	
		SELECT
				  A.MENU_CD
				, A.MENU_ID
				, A.HI_MENU_ID
				, A.MENU_NM
				, A.MENU_ENG_NM
				, A.MENU_LINK
				, A.PROG_YN
				, A.PROG_CD
				, A.PROG_PATH
				, A.PROG_PARAM
				, A.USE_SSO
		FROM 	MENU A
		ORDER BY A.SORT DESC
	</select>
	
</mapper>