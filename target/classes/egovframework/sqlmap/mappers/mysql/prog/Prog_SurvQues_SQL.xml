<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.nanwe.prog.service.impl.ProgSurvQuesMapper">

	<select id="selectSysSurvQuesList" parameterType="map" resultType="progSurvQuesVO">
		SELECT
					  SURV_ID
					, QUES_IDX
					, QUES_TITLE
					, QUES_TYPE
					, QUES_SORT
					, USE_YN
					, INPT_ID
					, INPT_IP
					, INPT_DTTM
					, MODI_ID
					, MODI_IP
					, MODI_DTTM
		FROM		PROG_SURV_BANK_QUES
		WHERE		SURV_ID = #{survId}
		<if test='useYn != null and useYn != ""'>
			AND		USE_YN = #{useYn}
		</if>
		ORDER BY	QUES_SORT ASC
	</select>
	
	<select id="selectSurvQuesList" parameterType="map" resultType="progSurvQuesVO">
		SELECT
					  SURV_ID
					, QUES_IDX
					, QUES_TITLE
					, QUES_TYPE
					, QUES_SORT
					, USE_YN
					, INPT_ID
					, INPT_IP
					, INPT_DTTM
					, MODI_ID
					, MODI_IP
					, MODI_DTTM
		FROM		PROG_SURV_QUES
		WHERE		PROG_ID = #{progId}
		<if test='useYn != null and useYn != ""'>
			AND		USE_YN = #{useYn}
		</if>
		ORDER BY	QUES_SORT ASC
	</select>
	
	<insert id="insertSurvQues" parameterType="progSurvQuesVO">
		<selectKey resultType="int" keyProperty="quesIdx" order="BEFORE">
			SELECT IFNULL(MAX(A.QUES_IDX), 0)+1 FROM PROG_SURV_BANK_QUES A WHERE A.SURV_ID = #{survId}
		</selectKey>
		INSERT
		INTO		PROG_SURV_BANK_QUES
		(			
					  SURV_ID
					, QUES_IDX
					, QUES_TITLE
					, QUES_TYPE
					, QUES_SORT
					, USE_YN
					, INPT_ID
					, INPT_IP
					, INPT_DTTM
					, MODI_ID
					, MODI_IP
					, MODI_DTTM
		) VALUES (
					  #{survId}
					, #{quesIdx}
					, #{quesTitle}
					, #{quesType}
					<choose>
						<when test="quesSort gt 0">
							, #{quesSort}
						</when>
						<otherwise>
							, (SELECT IFNULL(MAX(A.QUES_SORT), 0)+1 FROM PROG_SURV_BANK_QUES A WHERE A.SURV_ID = #{survId})
						</otherwise>
					</choose>					
					, #{useYn}				
					, #{inptId}
					, #{inptIp}
					, NOW()
					, #{inptId}
					, #{inptIp}
					, NOW()
		);
	</insert>
	
	<update id="updateSurvQues" parameterType="progSurvQuesVO">
		UPDATE
				PROG_SURV_BANK_QUES
		SET
			 	  QUES_TITLE	= #{quesTitle}
				, QUES_TYPE		= #{quesType}
				, QUES_SORT		= #{quesSort}
				, USE_YN		= #{useYn}
				, MODI_ID		= #{modiId}
				, MODI_IP		= #{modiIp}
				, MODI_DTTM		= NOW()
		WHERE	SURV_ID = #{survId}
		AND		QUES_IDX = #{quesIdx}
	</update>
	
	<delete id="deleteSurvQues" parameterType="progSurvQuesVO">
		DELETE 
		FROM		PROG_SURV_BANK_QUES
		WHERE		SURV_ID = #{survId}
		AND			QUES_IDX = #{quesIdx}
	</delete>

	<delete id="deleteSurvQuesBySurvId" parameterType="string">
		DELETE 
		FROM		PROG_SURV_BANK_QUES
		WHERE		SURV_ID = #{survId}
	</delete>
	
	<select id="selectSurvQuesResult" parameterType="map" resultType="progSurvQuesVO">		
		SELECT 
		        	S.* 
		        	, CONCAT(CAST(ROUND((S.ANSW_CNT/${totalCount}) * 100, 1) AS CHAR(5)),'%') AS ANSW_PERCENT
		FROM (
				   SELECT
					              A.PROG_ID
					            , A.QUES_IDX
					            , A.QUES_TITLE
					            , A.QUES_TYPE
					            , A.QUES_SORT
					            , IFNULL(B.AVG_POINT, 0) AS AVG_POINT
					            , IFNULL(B.ANSW_CNT, 0) AS ANSW_CNT
					FROM		PROG_SURV_QUES A
					LEFT JOIN   (
					                SELECT	      QUES_IDX
					                            , ROUND(AVG(ANSW_POINT), 1) AS AVG_POINT
					                            , COUNT(DISTINCT(INPT_ID)) AS ANSW_CNT
					                FROM	    PROG_SURV_ANSW
					                WHERE       PROG_ID = #{progId}
					                GROUP BY    QUES_IDX
					            ) B
					ON          A.QUES_IDX = B.QUES_IDX
					WHERE       A.PROG_ID = #{progId}
					AND		    A.USE_YN = 'Y'
					ORDER BY	A.QUES_SORT ASC
		) S
	</select>
	
	<select id="selectSurvQuesResultByUser" parameterType="map" resultType="progSurvQuesVO">		
		SELECT
		              A.SURV_ID
		            , A.QUES_IDX
		            , A.QUES_TITLE
		            , A.QUES_TYPE
		            , A.QUES_SORT
		            , IFNULL(B.AVG_POINT, 0) AS AVG_POINT
		FROM		PROG_SURV_QUES A
		LEFT JOIN   (
		                SELECT	      QUES_IDX
		                            , ROUND(AVG(ANSW_POINT), 1) AS AVG_POINT
		                FROM	    PROG_SURV_ANSW
		                WHERE       PROG_ID = #{progId}
						AND 	    INPT_ID = #{inptId}
		                GROUP BY    QUES_IDX
		            ) B
		ON          A.QUES_IDX = B.QUES_IDX
		WHERE       A.PROG_ID = #{progId}
		AND		    A.USE_YN = 'Y'
		ORDER BY	A.QUES_SORT ASC
	</select>
	
	<select id="selectProgSurvQuesCnt" parameterType="string" resultType="int">
		SELECT 
				COUNT(*)
		FROM 	PROG_SURV_QUES
		WHERE	PROG_ID = #{progId}
	</select>
	
</mapper>